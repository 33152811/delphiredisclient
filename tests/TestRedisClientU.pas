unit TestRedisClientU;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.Variants, IdTCPClient, Winapi.Windows, Vcl.Dialogs,
  Vcl.Forms, IdTCPConnection, Vcl.Controls, System.Classes, System.SysUtils,
  IdComponent, Winapi.Messages, IdBaseComponent, Vcl.Graphics, Vcl.StdCtrls,
  Redis.Client;

type
  // Test methods for class IRedisClient

  TestRedisClient = class(TTestCase)
  strict private
    FRedis: IRedisClient;
  private
    Res: string;
    ArrRes: TArray<string>;
    DeletedKeys: Integer;
    NotExists: Boolean;
    FValidResponse: Boolean;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCommandParser;
    procedure TestSetGet;
    procedure TestMSET;
    procedure TestDelete;
    procedure TestRPUSH_RPOP;
    procedure TestRPUSHX_LPUSHX;
    procedure TestLPUSH_LPOP;
    procedure TestLRANGE;
    procedure TestLLEN;
    procedure TestRPOPLPUSH;
    procedure TestBLPOP;
    procedure TestBRPOP;
    procedure TestLREM;
  end;

implementation


procedure TestRedisClient.SetUp;
begin
  FRedis := NewRedisClient('localhost');
end;

procedure TestRedisClient.TearDown;
begin
  FRedis := nil;
end;

procedure TestRedisClient.TestBLPOP;
begin
  // setup list
  FRedis.DEL(['mylist']);
  FRedis.RPUSH('mylist', ['one', 'two']);

  // pop from a non-empty list
  CheckTrue(FRedis.BLPOP(['mylist'], 1, ArrRes));
  CheckEquals('mylist', ArrRes[0]);
  CheckEquals('one', ArrRes[1]);

  // pop from a non-empty list
  CheckTrue(FRedis.BLPOP(['mylist'], 1, ArrRes));
  CheckEquals('mylist', ArrRes[0]);
  CheckEquals('two', ArrRes[1]);

  // pop from a empty list, check the timeout
  CheckFalse(FRedis.BLPOP(['mylist'], 1, ArrRes));
  CheckEquals(0, Length(ArrRes));

  // now, test if it works when another thread pushes a values into the list
  TThread.CreateAnonymousThread(
    procedure
    var
      Redis: IRedisClient;
    begin
      Redis := NewRedisClient('localhost');
      Redis.RPUSH('mylist', ['from', 'another', 'thread']);
    end).Start;

  CheckTrue(FRedis.BLPOP(['mylist'], 10, ArrRes));
  CheckEquals(2, Length(ArrRes));
end;

procedure TestRedisClient.TestBRPOP;
begin
  // setup list
  FRedis.DEL(['mylist']);
  FRedis.RPUSH('mylist', ['one', 'two']);

  // pop from a non-empty list
  CheckTrue(FRedis.BRPOP(['mylist'], 1, ArrRes));
  CheckEquals('mylist', ArrRes[0]);
  CheckEquals('two', ArrRes[1]);

  // pop from a non-empty list
  CheckTrue(FRedis.BRPOP(['mylist'], 1, ArrRes));
  CheckEquals('mylist', ArrRes[0]);
  CheckEquals('one', ArrRes[1]);

  // pop from a empty list, check the timeout
  CheckFalse(FRedis.BRPOP(['mylist'], 1, ArrRes));
  CheckEquals(0, Length(ArrRes));

  // now, test if it works when another thread pushes a values into the list
  TThread.CreateAnonymousThread(
    procedure
    var
      Redis: IRedisClient;
    begin
      Redis := NewRedisClient('localhost');
      Redis.RPUSH('mylist', ['from', 'another', 'thread']);
    end).Start;

  CheckTrue(FRedis.BRPOP(['mylist'], 10, ArrRes));
  CheckEquals(2, Length(ArrRes));
end;

procedure TestRedisClient.TestCommandParser;
  procedure CheckSimpleSet;
  begin
    CheckEquals('set', ArrRes[0]);
    CheckEquals('nome', ArrRes[1]);
    CheckEquals('daniele', ArrRes[2]);
  end;

  procedure CheckSimpleSet2;
  begin
    CheckEquals('set', ArrRes[0]);
    CheckEquals('no me', ArrRes[1]);
    CheckEquals('da ni\ele', ArrRes[2]);
  end;

begin
  ArrRes := FRedis.Tokenize('set nome daniele');
  CheckSimpleSet;
  ArrRes := FRedis.Tokenize('set    nome  daniele');
  CheckSimpleSet;
  ArrRes := FRedis.Tokenize('   set    "nome"    daniele   ');
  CheckSimpleSet;
  ArrRes := FRedis.Tokenize('   set    "nome"    "daniele"   ');
  CheckSimpleSet;
  ArrRes := FRedis.Tokenize('set  nome "daniele"');
  CheckSimpleSet;
  ArrRes := FRedis.Tokenize('set  "no me" "da ni\ele"');
  CheckSimpleSet2;
  try
    ArrRes := FRedis.Tokenize('set nome "daniele');
    Fail('invalid command not recognized');
  except

  end;
end;

procedure TestRedisClient.TestDelete;
var
  DeletedKeys: Integer;
begin
  FRedis.&SET('NOME', 'Daniele');
  FRedis.&SET('COGNOME', 'Teti');
  CheckEquals(1, FRedis.DEL(['NOME']));
  CheckFalse(FRedis.GET('NOME', Res));
  CheckTrue(FRedis.GET('COGNOME', Res));
end;

procedure TestRedisClient.TestLLEN;
begin
  FRedis.DEL(['mylist']);
  CheckEquals(0, FRedis.LLEN('mylist'));

  FRedis.RPUSH('mylist', ['one', 'two']);
  CheckEquals(2, FRedis.LLEN('mylist'));

  FRedis.&SET('myvalue', '3');
  ExpectedException := ERedisException;
  FRedis.LLEN('myvalue');
end;

procedure TestRedisClient.TestLPUSH_LPOP;
var
  Value: string;
begin
  FRedis.DEL(['mylist']);
  FRedis.LPUSH('mylist', ['one', 'two', 'three']);

  CheckTrue(FRedis.LPOP('mylist', Value));
  CheckEquals('three', Value);

  CheckTrue(FRedis.LPOP('mylist', Value));
  CheckEquals('two', Value);

  CheckTrue(FRedis.LPOP('mylist', Value));
  CheckEquals('one', Value);

  CheckFalse(FRedis.LPOP('mylist', Value))
end;

procedure TestRedisClient.TestLRANGE;
var
  Value: string;
begin
  FRedis.DEL(['mylist']);
  FRedis.RPUSH('mylist', ['one', 'two', 'three', 'four', 'five']);
  ArrRes := FRedis.LRANGE('mylist', 0, 1);
  CheckEquals(2, Length(ArrRes));
  CheckEquals('one', ArrRes[0]);
  CheckEquals('two', ArrRes[1]);

  ArrRes := FRedis.LRANGE('mylist', -1, -1);
  CheckEquals(1, Length(ArrRes));
  CheckEquals('five', ArrRes[0]);

  ArrRes := FRedis.LRANGE('mylist', 0, 20);
  CheckEquals(5, Length(ArrRes));
  CheckEquals('one', ArrRes[0]);
  CheckEquals('two', ArrRes[1]);
  CheckEquals('three', ArrRes[2]);
  CheckEquals('four', ArrRes[3]);
  CheckEquals('five', ArrRes[4]);

  ArrRes := FRedis.LRANGE('notexists', 0, 20);
  CheckEquals(0, Length(ArrRes));
end;

procedure TestRedisClient.TestLREM;
begin
  FRedis.DEL(['mylist']);
  FRedis.RPUSH('mylist', ['hello', 'hello', 'foo', 'hello']);
  FRedis.LREM('mylist', -2, 'hello');
  ArrRes := FRedis.LRANGE('mylist', 0, -1);
  CheckEquals('hello', ArrRes[0]);
  CheckEquals('foo', ArrRes[1]);
end;

procedure TestRedisClient.TestMSET;
begin
  CheckTrue(FRedis.FLUSHDB);
  CheckTrue(FRedis.MSET(['one', '1', 'two', '2', 'three', '3']));
  ArrRes := FRedis.KEYS('*o*');
  CheckEquals(2, Length(ArrRes));
end;

procedure TestRedisClient.TestRPOPLPUSH;
var
  Value: string;
begin
  FRedis.DEL(['mylist', 'myotherlist']);
  CheckFalse(FRedis.RPOPLPUSH('mylist', 'myotherlist', Value));
  CheckEquals('', Value);
  FRedis.RPUSH('mylist', ['one', 'two']);
  CheckEquals(true, FRedis.RPOPLPUSH('mylist', 'myotherlist', Value));
  CheckEquals('two', Value);
end;

procedure TestRedisClient.TestRPUSHX_LPUSHX;
begin
  FRedis.DEL(['mylist']);
  // mylist doesn't exists, so RPUSHX doesn't create it.
  CheckEquals(0, FRedis.RPUSHX('mylist', ['one']));
  CheckEquals(0, FRedis.LLEN('mylist'));

  // RPUSH creates mylist
  CheckEquals(1, FRedis.RPUSH('mylist', ['one']));
  CheckEquals(1, FRedis.LLEN('mylist'));

  // RPUSHX append to the list
  CheckEquals(2, FRedis.RPUSHX('mylist', ['two']));

  FRedis.DEL(['mylist']);
  CheckEquals(0, FRedis.LPUSHX('mylist', ['one']));
  CheckEquals(0, FRedis.LLEN('mylist'));
end;

procedure TestRedisClient.TestRPUSH_RPOP;
var
  Value: string;
begin
  FRedis.DEL(['mylist']);
  FRedis.RPUSH('mylist', ['one', 'two', 'three']);

  CheckTrue(FRedis.RPOP('mylist', Value));
  CheckEquals('three', Value);

  CheckTrue(FRedis.RPOP('mylist', Value));
  CheckEquals('two', Value);

  CheckTrue(FRedis.RPOP('mylist', Value));
  CheckEquals('one', Value);

  CheckEquals(False, FRedis.RPOP('mylist', Value));
end;

procedure TestRedisClient.TestSetGet;
var
  Res: string;
begin
  CheckTrue(FRedis.&SET('nome', 'Daniele'));
  CheckTrue(FRedis.GET('nome', Res));
  CheckEquals('Daniele', Res);

  CheckTrue(FRedis.&SET('no"me', 'Dan"iele'));
  CheckTrue(FRedis.GET('no"me', Res));
  CheckEquals('Dan"iele', Res);
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestRedisClient.Suite);

end.
